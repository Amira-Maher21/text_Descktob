#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test1.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Optics")]
	public partial class OptDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCustomerAccount(CustomerAccount instance);
    partial void UpdateCustomerAccount(CustomerAccount instance);
    partial void DeleteCustomerAccount(CustomerAccount instance);
    partial void InsertCustomerPayment(CustomerPayment instance);
    partial void UpdateCustomerPayment(CustomerPayment instance);
    partial void DeleteCustomerPayment(CustomerPayment instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertDocType(DocType instance);
    partial void UpdateDocType(DocType instance);
    partial void DeleteDocType(DocType instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertInvoiceDetailForLense(InvoiceDetailForLense instance);
    partial void UpdateInvoiceDetailForLense(InvoiceDetailForLense instance);
    partial void DeleteInvoiceDetailForLense(InvoiceDetailForLense instance);
    partial void InsertInvoiceDetialForShanbar(InvoiceDetialForShanbar instance);
    partial void UpdateInvoiceDetialForShanbar(InvoiceDetialForShanbar instance);
    partial void DeleteInvoiceDetialForShanbar(InvoiceDetialForShanbar instance);
    partial void InsertInvoiceMaster(InvoiceMaster instance);
    partial void UpdateInvoiceMaster(InvoiceMaster instance);
    partial void DeleteInvoiceMaster(InvoiceMaster instance);
    partial void InsertInvoiceStatu(InvoiceStatu instance);
    partial void UpdateInvoiceStatu(InvoiceStatu instance);
    partial void DeleteInvoiceStatu(InvoiceStatu instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemsStore(ItemsStore instance);
    partial void UpdateItemsStore(ItemsStore instance);
    partial void DeleteItemsStore(ItemsStore instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertSignalType(SignalType instance);
    partial void UpdateSignalType(SignalType instance);
    partial void DeleteSignalType(SignalType instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertTreasury(Treasury instance);
    partial void UpdateTreasury(Treasury instance);
    partial void DeleteTreasury(Treasury instance);
    #endregion
		
		public OptDataContext() : 
				base(global::test1.Properties.Settings.Default.OpticsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OptDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAccount> CustomerAccounts
		{
			get
			{
				return this.GetTable<CustomerAccount>();
			}
		}
		
		public System.Data.Linq.Table<CustomerPayment> CustomerPayments
		{
			get
			{
				return this.GetTable<CustomerPayment>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<DocType> DocTypes
		{
			get
			{
				return this.GetTable<DocType>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetailForLense> InvoiceDetailForLenses
		{
			get
			{
				return this.GetTable<InvoiceDetailForLense>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetialForShanbar> InvoiceDetialForShanbars
		{
			get
			{
				return this.GetTable<InvoiceDetialForShanbar>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this.GetTable<InvoiceMaster>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceStatu> InvoiceStatus
		{
			get
			{
				return this.GetTable<InvoiceStatu>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemsStore> ItemsStores
		{
			get
			{
				return this.GetTable<ItemsStore>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<SignalType> SignalTypes
		{
			get
			{
				return this.GetTable<SignalType>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<Treasury> Treasuries
		{
			get
			{
				return this.GetTable<Treasury>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobId;
		
		private string _JobDesc;
		
		private System.Nullable<bool> _JobISActive;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnJobDescChanging(string value);
    partial void OnJobDescChanged();
    partial void OnJobISActiveChanging(System.Nullable<bool> value);
    partial void OnJobISActiveChanged();
    #endregion
		
		public Job()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDesc", DbType="NVarChar(MAX)")]
		public string JobDesc
		{
			get
			{
				return this._JobDesc;
			}
			set
			{
				if ((this._JobDesc != value))
				{
					this.OnJobDescChanging(value);
					this.SendPropertyChanging();
					this._JobDesc = value;
					this.SendPropertyChanged("JobDesc");
					this.OnJobDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobISActive", DbType="Bit")]
		public System.Nullable<bool> JobISActive
		{
			get
			{
				return this._JobISActive;
			}
			set
			{
				if ((this._JobISActive != value))
				{
					this.OnJobISActiveChanging(value);
					this.SendPropertyChanging();
					this._JobISActive = value;
					this.SendPropertyChanged("JobISActive");
					this.OnJobISActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Employees", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _EmployeeName;
		
		private System.Nullable<int> _JobId;
		
		private string _UserNameLog;
		
		private System.Nullable<decimal> _EmployeeSalary;
		
		private string _EmployeePhone;
		
		private string _EmployeeAddress;
		
		private System.Nullable<bool> _EmployeeIsActive;
		
		private EntitySet<InvoiceMaster> _InvoiceMasters;
		
		private EntitySet<Treasury> _Treasuries;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnJobIdChanging(System.Nullable<int> value);
    partial void OnJobIdChanged();
    partial void OnUserNameLogChanging(string value);
    partial void OnUserNameLogChanged();
    partial void OnEmployeeSalaryChanging(System.Nullable<decimal> value);
    partial void OnEmployeeSalaryChanged();
    partial void OnEmployeePhoneChanging(string value);
    partial void OnEmployeePhoneChanged();
    partial void OnEmployeeAddressChanging(string value);
    partial void OnEmployeeAddressChanged();
    partial void OnEmployeeIsActiveChanging(System.Nullable<bool> value);
    partial void OnEmployeeIsActiveChanged();
    #endregion
		
		public Employee()
		{
			this._InvoiceMasters = new EntitySet<InvoiceMaster>(new Action<InvoiceMaster>(this.attach_InvoiceMasters), new Action<InvoiceMaster>(this.detach_InvoiceMasters));
			this._Treasuries = new EntitySet<Treasury>(new Action<Treasury>(this.attach_Treasuries), new Action<Treasury>(this.detach_Treasuries));
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(MAX)")]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int")]
		public System.Nullable<int> JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNameLog", DbType="NVarChar(MAX)")]
		public string UserNameLog
		{
			get
			{
				return this._UserNameLog;
			}
			set
			{
				if ((this._UserNameLog != value))
				{
					this.OnUserNameLogChanging(value);
					this.SendPropertyChanging();
					this._UserNameLog = value;
					this.SendPropertyChanged("UserNameLog");
					this.OnUserNameLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSalary", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EmployeeSalary
		{
			get
			{
				return this._EmployeeSalary;
			}
			set
			{
				if ((this._EmployeeSalary != value))
				{
					this.OnEmployeeSalaryChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSalary = value;
					this.SendPropertyChanged("EmployeeSalary");
					this.OnEmployeeSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePhone", DbType="NVarChar(MAX)")]
		public string EmployeePhone
		{
			get
			{
				return this._EmployeePhone;
			}
			set
			{
				if ((this._EmployeePhone != value))
				{
					this.OnEmployeePhoneChanging(value);
					this.SendPropertyChanging();
					this._EmployeePhone = value;
					this.SendPropertyChanged("EmployeePhone");
					this.OnEmployeePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAddress", DbType="NVarChar(MAX)")]
		public string EmployeeAddress
		{
			get
			{
				return this._EmployeeAddress;
			}
			set
			{
				if ((this._EmployeeAddress != value))
				{
					this.OnEmployeeAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAddress = value;
					this.SendPropertyChanged("EmployeeAddress");
					this.OnEmployeeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeIsActive", DbType="Bit")]
		public System.Nullable<bool> EmployeeIsActive
		{
			get
			{
				return this._EmployeeIsActive;
			}
			set
			{
				if ((this._EmployeeIsActive != value))
				{
					this.OnEmployeeIsActiveChanging(value);
					this.SendPropertyChanging();
					this._EmployeeIsActive = value;
					this.SendPropertyChanged("EmployeeIsActive");
					this.OnEmployeeIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_InvoiceMaster", Storage="_InvoiceMasters", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this._InvoiceMasters;
			}
			set
			{
				this._InvoiceMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Treasury", Storage="_Treasuries", ThisKey="EmployeeId", OtherKey="EmployeeIdForClose")]
		public EntitySet<Treasury> Treasuries
		{
			get
			{
				return this._Treasuries;
			}
			set
			{
				this._Treasuries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Job", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Treasuries(Treasury entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Treasuries(Treasury entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _CompaneDesc;
		
		private string _CompanyTaxFileNumber;
		
		private string _CompanyCommerceFileNumber;
		
		private string _CompanyPhone;
		
		private string _CompanyFax;
		
		private string _CompanyAddress;
		
		private string _CompanyLogo;
		
		private System.Nullable<bool> _CompanyIsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCompaneDescChanging(string value);
    partial void OnCompaneDescChanged();
    partial void OnCompanyTaxFileNumberChanging(string value);
    partial void OnCompanyTaxFileNumberChanged();
    partial void OnCompanyCommerceFileNumberChanging(string value);
    partial void OnCompanyCommerceFileNumberChanged();
    partial void OnCompanyPhoneChanging(string value);
    partial void OnCompanyPhoneChanged();
    partial void OnCompanyFaxChanging(string value);
    partial void OnCompanyFaxChanged();
    partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    partial void OnCompanyLogoChanging(string value);
    partial void OnCompanyLogoChanged();
    partial void OnCompanyIsActiveChanging(System.Nullable<bool> value);
    partial void OnCompanyIsActiveChanged();
    #endregion
		
		public Company()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompaneDesc", DbType="NVarChar(MAX)")]
		public string CompaneDesc
		{
			get
			{
				return this._CompaneDesc;
			}
			set
			{
				if ((this._CompaneDesc != value))
				{
					this.OnCompaneDescChanging(value);
					this.SendPropertyChanging();
					this._CompaneDesc = value;
					this.SendPropertyChanged("CompaneDesc");
					this.OnCompaneDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyTaxFileNumber", DbType="NVarChar(50)")]
		public string CompanyTaxFileNumber
		{
			get
			{
				return this._CompanyTaxFileNumber;
			}
			set
			{
				if ((this._CompanyTaxFileNumber != value))
				{
					this.OnCompanyTaxFileNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyTaxFileNumber = value;
					this.SendPropertyChanged("CompanyTaxFileNumber");
					this.OnCompanyTaxFileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyCommerceFileNumber", DbType="NVarChar(50)")]
		public string CompanyCommerceFileNumber
		{
			get
			{
				return this._CompanyCommerceFileNumber;
			}
			set
			{
				if ((this._CompanyCommerceFileNumber != value))
				{
					this.OnCompanyCommerceFileNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyCommerceFileNumber = value;
					this.SendPropertyChanged("CompanyCommerceFileNumber");
					this.OnCompanyCommerceFileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyPhone", DbType="NVarChar(50)")]
		public string CompanyPhone
		{
			get
			{
				return this._CompanyPhone;
			}
			set
			{
				if ((this._CompanyPhone != value))
				{
					this.OnCompanyPhoneChanging(value);
					this.SendPropertyChanging();
					this._CompanyPhone = value;
					this.SendPropertyChanged("CompanyPhone");
					this.OnCompanyPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyFax", DbType="NVarChar(50)")]
		public string CompanyFax
		{
			get
			{
				return this._CompanyFax;
			}
			set
			{
				if ((this._CompanyFax != value))
				{
					this.OnCompanyFaxChanging(value);
					this.SendPropertyChanging();
					this._CompanyFax = value;
					this.SendPropertyChanged("CompanyFax");
					this.OnCompanyFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAddress", DbType="NVarChar(MAX)")]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyLogo", DbType="NVarChar(MAX)")]
		public string CompanyLogo
		{
			get
			{
				return this._CompanyLogo;
			}
			set
			{
				if ((this._CompanyLogo != value))
				{
					this.OnCompanyLogoChanging(value);
					this.SendPropertyChanging();
					this._CompanyLogo = value;
					this.SendPropertyChanged("CompanyLogo");
					this.OnCompanyLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyIsActive", DbType="Bit")]
		public System.Nullable<bool> CompanyIsActive
		{
			get
			{
				return this._CompanyIsActive;
			}
			set
			{
				if ((this._CompanyIsActive != value))
				{
					this.OnCompanyIsActiveChanging(value);
					this.SendPropertyChanging();
					this._CompanyIsActive = value;
					this.SendPropertyChanged("CompanyIsActive");
					this.OnCompanyIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerAccount")]
	public partial class CustomerAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SuppliersAccountId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<long> _InvoiceId;
		
		private System.Nullable<decimal> _InvoiceNetValue;
		
		private EntitySet<CustomerPayment> _CustomerPayments;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppliersAccountIdChanging(int value);
    partial void OnSuppliersAccountIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<long> value);
    partial void OnInvoiceIdChanged();
    partial void OnInvoiceNetValueChanging(System.Nullable<decimal> value);
    partial void OnInvoiceNetValueChanged();
    #endregion
		
		public CustomerAccount()
		{
			this._CustomerPayments = new EntitySet<CustomerPayment>(new Action<CustomerPayment>(this.attach_CustomerPayments), new Action<CustomerPayment>(this.detach_CustomerPayments));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppliersAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SuppliersAccountId
		{
			get
			{
				return this._SuppliersAccountId;
			}
			set
			{
				if ((this._SuppliersAccountId != value))
				{
					this.OnSuppliersAccountIdChanging(value);
					this.SendPropertyChanging();
					this._SuppliersAccountId = value;
					this.SendPropertyChanged("SuppliersAccountId");
					this.OnSuppliersAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="BigInt")]
		public System.Nullable<long> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNetValue", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> InvoiceNetValue
		{
			get
			{
				return this._InvoiceNetValue;
			}
			set
			{
				if ((this._InvoiceNetValue != value))
				{
					this.OnInvoiceNetValueChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNetValue = value;
					this.SendPropertyChanged("InvoiceNetValue");
					this.OnInvoiceNetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerAccount_CustomerPayment", Storage="_CustomerPayments", ThisKey="SuppliersAccountId", OtherKey="SuppliersAccountId")]
		public EntitySet<CustomerPayment> CustomerPayments
		{
			get
			{
				return this._CustomerPayments;
			}
			set
			{
				this._CustomerPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAccount", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerAccounts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerAccounts.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerPayments(CustomerPayment entity)
		{
			this.SendPropertyChanging();
			entity.CustomerAccount = this;
		}
		
		private void detach_CustomerPayments(CustomerPayment entity)
		{
			this.SendPropertyChanging();
			entity.CustomerAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerPayment")]
	public partial class CustomerPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerPaymentId;
		
		private System.Nullable<int> _SuppliersAccountId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<decimal> _PaymentReceiptValue;
		
		private System.Nullable<System.DateTime> _PaymentReceiptDate;
		
		private System.Nullable<int> _PaymentReceiptNo;
		
		private System.Nullable<int> _TreasuryId;
		
		private string _PayMentType;
		
		private EntityRef<CustomerAccount> _CustomerAccount;
		
		private EntityRef<Treasury> _Treasury;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerPaymentIdChanging(int value);
    partial void OnCustomerPaymentIdChanged();
    partial void OnSuppliersAccountIdChanging(System.Nullable<int> value);
    partial void OnSuppliersAccountIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnPaymentReceiptValueChanging(System.Nullable<decimal> value);
    partial void OnPaymentReceiptValueChanged();
    partial void OnPaymentReceiptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentReceiptDateChanged();
    partial void OnPaymentReceiptNoChanging(System.Nullable<int> value);
    partial void OnPaymentReceiptNoChanged();
    partial void OnTreasuryIdChanging(System.Nullable<int> value);
    partial void OnTreasuryIdChanged();
    partial void OnPayMentTypeChanging(string value);
    partial void OnPayMentTypeChanged();
    #endregion
		
		public CustomerPayment()
		{
			this._CustomerAccount = default(EntityRef<CustomerAccount>);
			this._Treasury = default(EntityRef<Treasury>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPaymentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerPaymentId
		{
			get
			{
				return this._CustomerPaymentId;
			}
			set
			{
				if ((this._CustomerPaymentId != value))
				{
					this.OnCustomerPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerPaymentId = value;
					this.SendPropertyChanged("CustomerPaymentId");
					this.OnCustomerPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppliersAccountId", DbType="Int")]
		public System.Nullable<int> SuppliersAccountId
		{
			get
			{
				return this._SuppliersAccountId;
			}
			set
			{
				if ((this._SuppliersAccountId != value))
				{
					if (this._CustomerAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppliersAccountIdChanging(value);
					this.SendPropertyChanging();
					this._SuppliersAccountId = value;
					this.SendPropertyChanged("SuppliersAccountId");
					this.OnSuppliersAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentReceiptValue", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> PaymentReceiptValue
		{
			get
			{
				return this._PaymentReceiptValue;
			}
			set
			{
				if ((this._PaymentReceiptValue != value))
				{
					this.OnPaymentReceiptValueChanging(value);
					this.SendPropertyChanging();
					this._PaymentReceiptValue = value;
					this.SendPropertyChanged("PaymentReceiptValue");
					this.OnPaymentReceiptValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentReceiptDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentReceiptDate
		{
			get
			{
				return this._PaymentReceiptDate;
			}
			set
			{
				if ((this._PaymentReceiptDate != value))
				{
					this.OnPaymentReceiptDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentReceiptDate = value;
					this.SendPropertyChanged("PaymentReceiptDate");
					this.OnPaymentReceiptDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentReceiptNo", DbType="Int")]
		public System.Nullable<int> PaymentReceiptNo
		{
			get
			{
				return this._PaymentReceiptNo;
			}
			set
			{
				if ((this._PaymentReceiptNo != value))
				{
					this.OnPaymentReceiptNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentReceiptNo = value;
					this.SendPropertyChanged("PaymentReceiptNo");
					this.OnPaymentReceiptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreasuryId", DbType="Int")]
		public System.Nullable<int> TreasuryId
		{
			get
			{
				return this._TreasuryId;
			}
			set
			{
				if ((this._TreasuryId != value))
				{
					if (this._Treasury.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasuryIdChanging(value);
					this.SendPropertyChanging();
					this._TreasuryId = value;
					this.SendPropertyChanged("TreasuryId");
					this.OnTreasuryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayMentType", DbType="NVarChar(MAX)")]
		public string PayMentType
		{
			get
			{
				return this._PayMentType;
			}
			set
			{
				if ((this._PayMentType != value))
				{
					this.OnPayMentTypeChanging(value);
					this.SendPropertyChanging();
					this._PayMentType = value;
					this.SendPropertyChanged("PayMentType");
					this.OnPayMentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerAccount_CustomerPayment", Storage="_CustomerAccount", ThisKey="SuppliersAccountId", OtherKey="SuppliersAccountId", IsForeignKey=true, DeleteRule="CASCADE")]
		public CustomerAccount CustomerAccount
		{
			get
			{
				return this._CustomerAccount.Entity;
			}
			set
			{
				CustomerAccount previousValue = this._CustomerAccount.Entity;
				if (((previousValue != value) 
							|| (this._CustomerAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerAccount.Entity = null;
						previousValue.CustomerPayments.Remove(this);
					}
					this._CustomerAccount.Entity = value;
					if ((value != null))
					{
						value.CustomerPayments.Add(this);
						this._SuppliersAccountId = value.SuppliersAccountId;
					}
					else
					{
						this._SuppliersAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treasury_CustomerPayment", Storage="_Treasury", ThisKey="TreasuryId", OtherKey="TreasuryId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Treasury Treasury
		{
			get
			{
				return this._Treasury.Entity;
			}
			set
			{
				Treasury previousValue = this._Treasury.Entity;
				if (((previousValue != value) 
							|| (this._Treasury.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Treasury.Entity = null;
						previousValue.CustomerPayments.Remove(this);
					}
					this._Treasury.Entity = value;
					if ((value != null))
					{
						value.CustomerPayments.Add(this);
						this._TreasuryId = value.TreasuryId;
					}
					else
					{
						this._TreasuryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Treasury");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private string _CustomerName;
		
		private string _CustomerPhone1;
		
		private string _CustomerPhone2;
		
		private string _CustomerAddress;
		
		private string _CustomerEmail;
		
		private string _CustomerNotes;
		
		private System.Nullable<bool> _CustomerIsActive;
		
		private System.Nullable<int> _CustomerFlag;
		
		private System.Nullable<decimal> _FirstPerioudBalance;
		
		private EntitySet<CustomerAccount> _CustomerAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhone1Changing(string value);
    partial void OnCustomerPhone1Changed();
    partial void OnCustomerPhone2Changing(string value);
    partial void OnCustomerPhone2Changed();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnCustomerEmailChanging(string value);
    partial void OnCustomerEmailChanged();
    partial void OnCustomerNotesChanging(string value);
    partial void OnCustomerNotesChanged();
    partial void OnCustomerIsActiveChanging(System.Nullable<bool> value);
    partial void OnCustomerIsActiveChanged();
    partial void OnCustomerFlagChanging(System.Nullable<int> value);
    partial void OnCustomerFlagChanged();
    partial void OnFirstPerioudBalanceChanging(System.Nullable<decimal> value);
    partial void OnFirstPerioudBalanceChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerAccounts = new EntitySet<CustomerAccount>(new Action<CustomerAccount>(this.attach_CustomerAccounts), new Action<CustomerAccount>(this.detach_CustomerAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(MAX)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone1", DbType="NVarChar(15)")]
		public string CustomerPhone1
		{
			get
			{
				return this._CustomerPhone1;
			}
			set
			{
				if ((this._CustomerPhone1 != value))
				{
					this.OnCustomerPhone1Changing(value);
					this.SendPropertyChanging();
					this._CustomerPhone1 = value;
					this.SendPropertyChanged("CustomerPhone1");
					this.OnCustomerPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone2", DbType="NVarChar(15)")]
		public string CustomerPhone2
		{
			get
			{
				return this._CustomerPhone2;
			}
			set
			{
				if ((this._CustomerPhone2 != value))
				{
					this.OnCustomerPhone2Changing(value);
					this.SendPropertyChanging();
					this._CustomerPhone2 = value;
					this.SendPropertyChanged("CustomerPhone2");
					this.OnCustomerPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(MAX)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerEmail", DbType="NVarChar(MAX)")]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this.OnCustomerEmailChanging(value);
					this.SendPropertyChanging();
					this._CustomerEmail = value;
					this.SendPropertyChanged("CustomerEmail");
					this.OnCustomerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerNotes", DbType="NVarChar(MAX)")]
		public string CustomerNotes
		{
			get
			{
				return this._CustomerNotes;
			}
			set
			{
				if ((this._CustomerNotes != value))
				{
					this.OnCustomerNotesChanging(value);
					this.SendPropertyChanging();
					this._CustomerNotes = value;
					this.SendPropertyChanged("CustomerNotes");
					this.OnCustomerNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerIsActive", DbType="Bit")]
		public System.Nullable<bool> CustomerIsActive
		{
			get
			{
				return this._CustomerIsActive;
			}
			set
			{
				if ((this._CustomerIsActive != value))
				{
					this.OnCustomerIsActiveChanging(value);
					this.SendPropertyChanging();
					this._CustomerIsActive = value;
					this.SendPropertyChanged("CustomerIsActive");
					this.OnCustomerIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerFlag", DbType="Int")]
		public System.Nullable<int> CustomerFlag
		{
			get
			{
				return this._CustomerFlag;
			}
			set
			{
				if ((this._CustomerFlag != value))
				{
					this.OnCustomerFlagChanging(value);
					this.SendPropertyChanging();
					this._CustomerFlag = value;
					this.SendPropertyChanged("CustomerFlag");
					this.OnCustomerFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstPerioudBalance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FirstPerioudBalance
		{
			get
			{
				return this._FirstPerioudBalance;
			}
			set
			{
				if ((this._FirstPerioudBalance != value))
				{
					this.OnFirstPerioudBalanceChanging(value);
					this.SendPropertyChanging();
					this._FirstPerioudBalance = value;
					this.SendPropertyChanged("FirstPerioudBalance");
					this.OnFirstPerioudBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerAccount", Storage="_CustomerAccounts", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<CustomerAccount> CustomerAccounts
		{
			get
			{
				return this._CustomerAccounts;
			}
			set
			{
				this._CustomerAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerAccounts(CustomerAccount entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerAccounts(CustomerAccount entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorId;
		
		private string _DoctorName;
		
		private string _DoctorAddress;
		
		private string _DoctorPhone;
		
		private string _AppointmentFrom;
		
		private string _AppointmentTo;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnDoctorNameChanging(string value);
    partial void OnDoctorNameChanged();
    partial void OnDoctorAddressChanging(string value);
    partial void OnDoctorAddressChanged();
    partial void OnDoctorPhoneChanging(string value);
    partial void OnDoctorPhoneChanged();
    partial void OnAppointmentFromChanging(string value);
    partial void OnAppointmentFromChanged();
    partial void OnAppointmentToChanging(string value);
    partial void OnAppointmentToChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Doctor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(MAX)")]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this.OnDoctorNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorName = value;
					this.SendPropertyChanged("DoctorName");
					this.OnDoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorAddress", DbType="NVarChar(MAX)")]
		public string DoctorAddress
		{
			get
			{
				return this._DoctorAddress;
			}
			set
			{
				if ((this._DoctorAddress != value))
				{
					this.OnDoctorAddressChanging(value);
					this.SendPropertyChanging();
					this._DoctorAddress = value;
					this.SendPropertyChanged("DoctorAddress");
					this.OnDoctorAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorPhone", DbType="NVarChar(MAX)")]
		public string DoctorPhone
		{
			get
			{
				return this._DoctorPhone;
			}
			set
			{
				if ((this._DoctorPhone != value))
				{
					this.OnDoctorPhoneChanging(value);
					this.SendPropertyChanging();
					this._DoctorPhone = value;
					this.SendPropertyChanged("DoctorPhone");
					this.OnDoctorPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentFrom", DbType="NVarChar(MAX)")]
		public string AppointmentFrom
		{
			get
			{
				return this._AppointmentFrom;
			}
			set
			{
				if ((this._AppointmentFrom != value))
				{
					this.OnAppointmentFromChanging(value);
					this.SendPropertyChanging();
					this._AppointmentFrom = value;
					this.SendPropertyChanged("AppointmentFrom");
					this.OnAppointmentFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentTo", DbType="NVarChar(MAX)")]
		public string AppointmentTo
		{
			get
			{
				return this._AppointmentTo;
			}
			set
			{
				if ((this._AppointmentTo != value))
				{
					this.OnAppointmentToChanging(value);
					this.SendPropertyChanging();
					this._AppointmentTo = value;
					this.SendPropertyChanged("AppointmentTo");
					this.OnAppointmentToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocType")]
	public partial class DocType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocTypeId;
		
		private string _DocTypeDesc;
		
		private System.Nullable<int> _TreasuryFactor;
		
		private System.Nullable<int> _StoreFactor;
		
		private System.Nullable<int> _CustomerFactor;
		
		private string _SupplierFactor;
		
		private EntitySet<InvoiceMaster> _InvoiceMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocTypeIdChanging(int value);
    partial void OnDocTypeIdChanged();
    partial void OnDocTypeDescChanging(string value);
    partial void OnDocTypeDescChanged();
    partial void OnTreasuryFactorChanging(System.Nullable<int> value);
    partial void OnTreasuryFactorChanged();
    partial void OnStoreFactorChanging(System.Nullable<int> value);
    partial void OnStoreFactorChanged();
    partial void OnCustomerFactorChanging(System.Nullable<int> value);
    partial void OnCustomerFactorChanged();
    partial void OnSupplierFactorChanging(string value);
    partial void OnSupplierFactorChanged();
    #endregion
		
		public DocType()
		{
			this._InvoiceMasters = new EntitySet<InvoiceMaster>(new Action<InvoiceMaster>(this.attach_InvoiceMasters), new Action<InvoiceMaster>(this.detach_InvoiceMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocTypeId
		{
			get
			{
				return this._DocTypeId;
			}
			set
			{
				if ((this._DocTypeId != value))
				{
					this.OnDocTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocTypeId = value;
					this.SendPropertyChanged("DocTypeId");
					this.OnDocTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTypeDesc", DbType="NVarChar(50)")]
		public string DocTypeDesc
		{
			get
			{
				return this._DocTypeDesc;
			}
			set
			{
				if ((this._DocTypeDesc != value))
				{
					this.OnDocTypeDescChanging(value);
					this.SendPropertyChanging();
					this._DocTypeDesc = value;
					this.SendPropertyChanged("DocTypeDesc");
					this.OnDocTypeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreasuryFactor", DbType="Int")]
		public System.Nullable<int> TreasuryFactor
		{
			get
			{
				return this._TreasuryFactor;
			}
			set
			{
				if ((this._TreasuryFactor != value))
				{
					this.OnTreasuryFactorChanging(value);
					this.SendPropertyChanging();
					this._TreasuryFactor = value;
					this.SendPropertyChanged("TreasuryFactor");
					this.OnTreasuryFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreFactor", DbType="Int")]
		public System.Nullable<int> StoreFactor
		{
			get
			{
				return this._StoreFactor;
			}
			set
			{
				if ((this._StoreFactor != value))
				{
					this.OnStoreFactorChanging(value);
					this.SendPropertyChanging();
					this._StoreFactor = value;
					this.SendPropertyChanged("StoreFactor");
					this.OnStoreFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerFactor", DbType="Int")]
		public System.Nullable<int> CustomerFactor
		{
			get
			{
				return this._CustomerFactor;
			}
			set
			{
				if ((this._CustomerFactor != value))
				{
					this.OnCustomerFactorChanging(value);
					this.SendPropertyChanging();
					this._CustomerFactor = value;
					this.SendPropertyChanged("CustomerFactor");
					this.OnCustomerFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierFactor", DbType="NVarChar(10)")]
		public string SupplierFactor
		{
			get
			{
				return this._SupplierFactor;
			}
			set
			{
				if ((this._SupplierFactor != value))
				{
					this.OnSupplierFactorChanging(value);
					this.SendPropertyChanging();
					this._SupplierFactor = value;
					this.SendPropertyChanged("SupplierFactor");
					this.OnSupplierFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocType_InvoiceMaster", Storage="_InvoiceMasters", ThisKey="DocTypeId", OtherKey="DocTypeId")]
		public EntitySet<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this._InvoiceMasters;
			}
			set
			{
				this._InvoiceMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.DocType = this;
		}
		
		private void detach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.DocType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupDesc;
		
		private System.Nullable<bool> _GroupIsActive;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupDescChanging(string value);
    partial void OnGroupDescChanged();
    partial void OnGroupIsActiveChanging(System.Nullable<bool> value);
    partial void OnGroupIsActiveChanged();
    #endregion
		
		public Group()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDesc", DbType="NVarChar(MAX)")]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this.OnGroupDescChanging(value);
					this.SendPropertyChanging();
					this._GroupDesc = value;
					this.SendPropertyChanged("GroupDesc");
					this.OnGroupDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupIsActive", DbType="Bit")]
		public System.Nullable<bool> GroupIsActive
		{
			get
			{
				return this._GroupIsActive;
			}
			set
			{
				if ((this._GroupIsActive != value))
				{
					this.OnGroupIsActiveChanging(value);
					this.SendPropertyChanging();
					this._GroupIsActive = value;
					this.SendPropertyChanged("GroupIsActive");
					this.OnGroupIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Item", Storage="_Items", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetailForLenses")]
	public partial class InvoiceDetailForLense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceDetailForLensesId;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _ItemId;
		
		private string _LensesDirection;
		
		private string _Sph;
		
		private string _Cyl;
		
		private System.Nullable<int> _ItemQty;
		
		private System.Nullable<decimal> _DoubleSellPrice;
		
		private System.Nullable<decimal> _SingleSellPrice;
		
		private System.Nullable<decimal> _ItemTotalValue;
		
		private System.Nullable<decimal> _ItemDiscount;
		
		private System.Nullable<decimal> _ItemNetValue;
		
		private EntityRef<InvoiceMaster> _InvoiceMaster;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceDetailForLensesIdChanging(int value);
    partial void OnInvoiceDetailForLensesIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnLensesDirectionChanging(string value);
    partial void OnLensesDirectionChanged();
    partial void OnSphChanging(string value);
    partial void OnSphChanged();
    partial void OnCylChanging(string value);
    partial void OnCylChanged();
    partial void OnItemQtyChanging(System.Nullable<int> value);
    partial void OnItemQtyChanged();
    partial void OnDoubleSellPriceChanging(System.Nullable<decimal> value);
    partial void OnDoubleSellPriceChanged();
    partial void OnSingleSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSingleSellPriceChanged();
    partial void OnItemTotalValueChanging(System.Nullable<decimal> value);
    partial void OnItemTotalValueChanged();
    partial void OnItemDiscountChanging(System.Nullable<decimal> value);
    partial void OnItemDiscountChanged();
    partial void OnItemNetValueChanging(System.Nullable<decimal> value);
    partial void OnItemNetValueChanged();
    #endregion
		
		public InvoiceDetailForLense()
		{
			this._InvoiceMaster = default(EntityRef<InvoiceMaster>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDetailForLensesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceDetailForLensesId
		{
			get
			{
				return this._InvoiceDetailForLensesId;
			}
			set
			{
				if ((this._InvoiceDetailForLensesId != value))
				{
					this.OnInvoiceDetailForLensesIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDetailForLensesId = value;
					this.SendPropertyChanged("InvoiceDetailForLensesId");
					this.OnInvoiceDetailForLensesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._InvoiceMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LensesDirection", DbType="NVarChar(MAX)")]
		public string LensesDirection
		{
			get
			{
				return this._LensesDirection;
			}
			set
			{
				if ((this._LensesDirection != value))
				{
					this.OnLensesDirectionChanging(value);
					this.SendPropertyChanging();
					this._LensesDirection = value;
					this.SendPropertyChanged("LensesDirection");
					this.OnLensesDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sph", DbType="NVarChar(MAX)")]
		public string Sph
		{
			get
			{
				return this._Sph;
			}
			set
			{
				if ((this._Sph != value))
				{
					this.OnSphChanging(value);
					this.SendPropertyChanging();
					this._Sph = value;
					this.SendPropertyChanged("Sph");
					this.OnSphChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cyl", DbType="NVarChar(MAX)")]
		public string Cyl
		{
			get
			{
				return this._Cyl;
			}
			set
			{
				if ((this._Cyl != value))
				{
					this.OnCylChanging(value);
					this.SendPropertyChanging();
					this._Cyl = value;
					this.SendPropertyChanged("Cyl");
					this.OnCylChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemQty", DbType="Int")]
		public System.Nullable<int> ItemQty
		{
			get
			{
				return this._ItemQty;
			}
			set
			{
				if ((this._ItemQty != value))
				{
					this.OnItemQtyChanging(value);
					this.SendPropertyChanging();
					this._ItemQty = value;
					this.SendPropertyChanged("ItemQty");
					this.OnItemQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DoubleSellPrice
		{
			get
			{
				return this._DoubleSellPrice;
			}
			set
			{
				if ((this._DoubleSellPrice != value))
				{
					this.OnDoubleSellPriceChanging(value);
					this.SendPropertyChanging();
					this._DoubleSellPrice = value;
					this.SendPropertyChanged("DoubleSellPrice");
					this.OnDoubleSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SingleSellPrice
		{
			get
			{
				return this._SingleSellPrice;
			}
			set
			{
				if ((this._SingleSellPrice != value))
				{
					this.OnSingleSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SingleSellPrice = value;
					this.SendPropertyChanged("SingleSellPrice");
					this.OnSingleSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTotalValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemTotalValue
		{
			get
			{
				return this._ItemTotalValue;
			}
			set
			{
				if ((this._ItemTotalValue != value))
				{
					this.OnItemTotalValueChanging(value);
					this.SendPropertyChanging();
					this._ItemTotalValue = value;
					this.SendPropertyChanged("ItemTotalValue");
					this.OnItemTotalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemDiscount
		{
			get
			{
				return this._ItemDiscount;
			}
			set
			{
				if ((this._ItemDiscount != value))
				{
					this.OnItemDiscountChanging(value);
					this.SendPropertyChanging();
					this._ItemDiscount = value;
					this.SendPropertyChanged("ItemDiscount");
					this.OnItemDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNetValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemNetValue
		{
			get
			{
				return this._ItemNetValue;
			}
			set
			{
				if ((this._ItemNetValue != value))
				{
					this.OnItemNetValueChanging(value);
					this.SendPropertyChanging();
					this._ItemNetValue = value;
					this.SendPropertyChanged("ItemNetValue");
					this.OnItemNetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceMaster_InvoiceDetailForLense", Storage="_InvoiceMaster", ThisKey="InvoiceId", OtherKey="InvoiceId", IsForeignKey=true, DeleteRule="CASCADE")]
		public InvoiceMaster InvoiceMaster
		{
			get
			{
				return this._InvoiceMaster.Entity;
			}
			set
			{
				InvoiceMaster previousValue = this._InvoiceMaster.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceMaster.Entity = null;
						previousValue.InvoiceDetailForLenses.Remove(this);
					}
					this._InvoiceMaster.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetailForLenses.Add(this);
						this._InvoiceId = value.InvoiceId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InvoiceDetailForLense", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.InvoiceDetailForLenses.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetailForLenses.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetialForShanbar")]
	public partial class InvoiceDetialForShanbar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceDetialForShanbarId;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<decimal> _SellPrice;
		
		private System.Nullable<decimal> _BuyPrice;
		
		private System.Nullable<int> _ItemQty;
		
		private System.Nullable<decimal> _ItemTotalValue;
		
		private System.Nullable<decimal> _ItemDiscount;
		
		private System.Nullable<decimal> _ItemNetValue;
		
		private EntityRef<InvoiceMaster> _InvoiceMaster;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceDetialForShanbarIdChanging(int value);
    partial void OnInvoiceDetialForShanbarIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSellPriceChanged();
    partial void OnBuyPriceChanging(System.Nullable<decimal> value);
    partial void OnBuyPriceChanged();
    partial void OnItemQtyChanging(System.Nullable<int> value);
    partial void OnItemQtyChanged();
    partial void OnItemTotalValueChanging(System.Nullable<decimal> value);
    partial void OnItemTotalValueChanged();
    partial void OnItemDiscountChanging(System.Nullable<decimal> value);
    partial void OnItemDiscountChanged();
    partial void OnItemNetValueChanging(System.Nullable<decimal> value);
    partial void OnItemNetValueChanged();
    #endregion
		
		public InvoiceDetialForShanbar()
		{
			this._InvoiceMaster = default(EntityRef<InvoiceMaster>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDetialForShanbarId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceDetialForShanbarId
		{
			get
			{
				return this._InvoiceDetialForShanbarId;
			}
			set
			{
				if ((this._InvoiceDetialForShanbarId != value))
				{
					this.OnInvoiceDetialForShanbarIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDetialForShanbarId = value;
					this.SendPropertyChanged("InvoiceDetialForShanbarId");
					this.OnInvoiceDetialForShanbarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._InvoiceMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemQty", DbType="Int")]
		public System.Nullable<int> ItemQty
		{
			get
			{
				return this._ItemQty;
			}
			set
			{
				if ((this._ItemQty != value))
				{
					this.OnItemQtyChanging(value);
					this.SendPropertyChanging();
					this._ItemQty = value;
					this.SendPropertyChanged("ItemQty");
					this.OnItemQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTotalValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemTotalValue
		{
			get
			{
				return this._ItemTotalValue;
			}
			set
			{
				if ((this._ItemTotalValue != value))
				{
					this.OnItemTotalValueChanging(value);
					this.SendPropertyChanging();
					this._ItemTotalValue = value;
					this.SendPropertyChanged("ItemTotalValue");
					this.OnItemTotalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemDiscount
		{
			get
			{
				return this._ItemDiscount;
			}
			set
			{
				if ((this._ItemDiscount != value))
				{
					this.OnItemDiscountChanging(value);
					this.SendPropertyChanging();
					this._ItemDiscount = value;
					this.SendPropertyChanged("ItemDiscount");
					this.OnItemDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNetValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemNetValue
		{
			get
			{
				return this._ItemNetValue;
			}
			set
			{
				if ((this._ItemNetValue != value))
				{
					this.OnItemNetValueChanging(value);
					this.SendPropertyChanging();
					this._ItemNetValue = value;
					this.SendPropertyChanged("ItemNetValue");
					this.OnItemNetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceMaster_InvoiceDetialForShanbar", Storage="_InvoiceMaster", ThisKey="InvoiceId", OtherKey="InvoiceId", IsForeignKey=true, DeleteRule="CASCADE")]
		public InvoiceMaster InvoiceMaster
		{
			get
			{
				return this._InvoiceMaster.Entity;
			}
			set
			{
				InvoiceMaster previousValue = this._InvoiceMaster.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceMaster.Entity = null;
						previousValue.InvoiceDetialForShanbars.Remove(this);
					}
					this._InvoiceMaster.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetialForShanbars.Add(this);
						this._InvoiceId = value.InvoiceId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InvoiceDetialForShanbar", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.InvoiceDetialForShanbars.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetialForShanbars.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceMaster")]
	public partial class InvoiceMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private System.Nullable<int> _InvoiceStatuId;
		
		private System.Nullable<int> _DocTypeId;
		
		private System.Nullable<int> _CustomerId;
		
		private string _CustomerPhone1;
		
		private string _CustomerPhone2;
		
		private string _CustomerAddress;
		
		private System.Nullable<int> _StoreId;
		
		private System.Nullable<decimal> _InvoiceTotalValue;
		
		private System.Nullable<decimal> _InvoiceTotalDiscount;
		
		private System.Nullable<decimal> _MasterOverAllDiscount;
		
		private System.Nullable<decimal> _InvoiceNetValue;
		
		private System.Nullable<decimal> _TotalPayedValue;
		
		private System.Nullable<decimal> _TotalRestValue;
		
		private System.Nullable<int> _TreasuryId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _TotalNumberOfLenses;
		
		private System.Nullable<int> _TotalNumberOfShanbar;
		
		private System.Nullable<bool> _IsClosed;
		
		private System.Nullable<bool> _IsRecieved;
		
		private System.Nullable<bool> _IsDiscarded;
		
		private EntitySet<InvoiceDetailForLense> _InvoiceDetailForLenses;
		
		private EntitySet<InvoiceDetialForShanbar> _InvoiceDetialForShanbars;
		
		private EntityRef<DocType> _DocType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<InvoiceStatu> _InvoiceStatu;
		
		private EntityRef<Store> _Store;
		
		private EntityRef<Treasury> _Treasury;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnInvoiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceDateChanged();
    partial void OnInvoiceStatuIdChanging(System.Nullable<int> value);
    partial void OnInvoiceStatuIdChanged();
    partial void OnDocTypeIdChanging(System.Nullable<int> value);
    partial void OnDocTypeIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnCustomerPhone1Changing(string value);
    partial void OnCustomerPhone1Changed();
    partial void OnCustomerPhone2Changing(string value);
    partial void OnCustomerPhone2Changed();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnStoreIdChanging(System.Nullable<int> value);
    partial void OnStoreIdChanged();
    partial void OnInvoiceTotalValueChanging(System.Nullable<decimal> value);
    partial void OnInvoiceTotalValueChanged();
    partial void OnInvoiceTotalDiscountChanging(System.Nullable<decimal> value);
    partial void OnInvoiceTotalDiscountChanged();
    partial void OnMasterOverAllDiscountChanging(System.Nullable<decimal> value);
    partial void OnMasterOverAllDiscountChanged();
    partial void OnInvoiceNetValueChanging(System.Nullable<decimal> value);
    partial void OnInvoiceNetValueChanged();
    partial void OnTotalPayedValueChanging(System.Nullable<decimal> value);
    partial void OnTotalPayedValueChanged();
    partial void OnTotalRestValueChanging(System.Nullable<decimal> value);
    partial void OnTotalRestValueChanged();
    partial void OnTreasuryIdChanging(System.Nullable<int> value);
    partial void OnTreasuryIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnTotalNumberOfLensesChanging(System.Nullable<int> value);
    partial void OnTotalNumberOfLensesChanged();
    partial void OnTotalNumberOfShanbarChanging(System.Nullable<int> value);
    partial void OnTotalNumberOfShanbarChanged();
    partial void OnIsClosedChanging(System.Nullable<bool> value);
    partial void OnIsClosedChanged();
    partial void OnIsRecievedChanging(System.Nullable<bool> value);
    partial void OnIsRecievedChanged();
    partial void OnIsDiscardedChanging(System.Nullable<bool> value);
    partial void OnIsDiscardedChanged();
    #endregion
		
		public InvoiceMaster()
		{
			this._InvoiceDetailForLenses = new EntitySet<InvoiceDetailForLense>(new Action<InvoiceDetailForLense>(this.attach_InvoiceDetailForLenses), new Action<InvoiceDetailForLense>(this.detach_InvoiceDetailForLenses));
			this._InvoiceDetialForShanbars = new EntitySet<InvoiceDetialForShanbar>(new Action<InvoiceDetialForShanbar>(this.attach_InvoiceDetialForShanbars), new Action<InvoiceDetialForShanbar>(this.detach_InvoiceDetialForShanbars));
			this._DocType = default(EntityRef<DocType>);
			this._Employee = default(EntityRef<Employee>);
			this._InvoiceStatu = default(EntityRef<InvoiceStatu>);
			this._Store = default(EntityRef<Store>);
			this._Treasury = default(EntityRef<Treasury>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatuId", DbType="Int")]
		public System.Nullable<int> InvoiceStatuId
		{
			get
			{
				return this._InvoiceStatuId;
			}
			set
			{
				if ((this._InvoiceStatuId != value))
				{
					if (this._InvoiceStatu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceStatuIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceStatuId = value;
					this.SendPropertyChanged("InvoiceStatuId");
					this.OnInvoiceStatuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTypeId", DbType="Int")]
		public System.Nullable<int> DocTypeId
		{
			get
			{
				return this._DocTypeId;
			}
			set
			{
				if ((this._DocTypeId != value))
				{
					if (this._DocType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocTypeId = value;
					this.SendPropertyChanged("DocTypeId");
					this.OnDocTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone1", DbType="NVarChar(MAX)")]
		public string CustomerPhone1
		{
			get
			{
				return this._CustomerPhone1;
			}
			set
			{
				if ((this._CustomerPhone1 != value))
				{
					this.OnCustomerPhone1Changing(value);
					this.SendPropertyChanging();
					this._CustomerPhone1 = value;
					this.SendPropertyChanged("CustomerPhone1");
					this.OnCustomerPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone2", DbType="NVarChar(MAX)")]
		public string CustomerPhone2
		{
			get
			{
				return this._CustomerPhone2;
			}
			set
			{
				if ((this._CustomerPhone2 != value))
				{
					this.OnCustomerPhone2Changing(value);
					this.SendPropertyChanging();
					this._CustomerPhone2 = value;
					this.SendPropertyChanged("CustomerPhone2");
					this.OnCustomerPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(MAX)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceTotalValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> InvoiceTotalValue
		{
			get
			{
				return this._InvoiceTotalValue;
			}
			set
			{
				if ((this._InvoiceTotalValue != value))
				{
					this.OnInvoiceTotalValueChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTotalValue = value;
					this.SendPropertyChanged("InvoiceTotalValue");
					this.OnInvoiceTotalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceTotalDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> InvoiceTotalDiscount
		{
			get
			{
				return this._InvoiceTotalDiscount;
			}
			set
			{
				if ((this._InvoiceTotalDiscount != value))
				{
					this.OnInvoiceTotalDiscountChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTotalDiscount = value;
					this.SendPropertyChanged("InvoiceTotalDiscount");
					this.OnInvoiceTotalDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterOverAllDiscount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> MasterOverAllDiscount
		{
			get
			{
				return this._MasterOverAllDiscount;
			}
			set
			{
				if ((this._MasterOverAllDiscount != value))
				{
					this.OnMasterOverAllDiscountChanging(value);
					this.SendPropertyChanging();
					this._MasterOverAllDiscount = value;
					this.SendPropertyChanged("MasterOverAllDiscount");
					this.OnMasterOverAllDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNetValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> InvoiceNetValue
		{
			get
			{
				return this._InvoiceNetValue;
			}
			set
			{
				if ((this._InvoiceNetValue != value))
				{
					this.OnInvoiceNetValueChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNetValue = value;
					this.SendPropertyChanged("InvoiceNetValue");
					this.OnInvoiceNetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPayedValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalPayedValue
		{
			get
			{
				return this._TotalPayedValue;
			}
			set
			{
				if ((this._TotalPayedValue != value))
				{
					this.OnTotalPayedValueChanging(value);
					this.SendPropertyChanging();
					this._TotalPayedValue = value;
					this.SendPropertyChanged("TotalPayedValue");
					this.OnTotalPayedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRestValue", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalRestValue
		{
			get
			{
				return this._TotalRestValue;
			}
			set
			{
				if ((this._TotalRestValue != value))
				{
					this.OnTotalRestValueChanging(value);
					this.SendPropertyChanging();
					this._TotalRestValue = value;
					this.SendPropertyChanged("TotalRestValue");
					this.OnTotalRestValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreasuryId", DbType="Int")]
		public System.Nullable<int> TreasuryId
		{
			get
			{
				return this._TreasuryId;
			}
			set
			{
				if ((this._TreasuryId != value))
				{
					if (this._Treasury.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasuryIdChanging(value);
					this.SendPropertyChanging();
					this._TreasuryId = value;
					this.SendPropertyChanged("TreasuryId");
					this.OnTreasuryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNumberOfLenses", DbType="Int")]
		public System.Nullable<int> TotalNumberOfLenses
		{
			get
			{
				return this._TotalNumberOfLenses;
			}
			set
			{
				if ((this._TotalNumberOfLenses != value))
				{
					this.OnTotalNumberOfLensesChanging(value);
					this.SendPropertyChanging();
					this._TotalNumberOfLenses = value;
					this.SendPropertyChanged("TotalNumberOfLenses");
					this.OnTotalNumberOfLensesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNumberOfShanbar", DbType="Int")]
		public System.Nullable<int> TotalNumberOfShanbar
		{
			get
			{
				return this._TotalNumberOfShanbar;
			}
			set
			{
				if ((this._TotalNumberOfShanbar != value))
				{
					this.OnTotalNumberOfShanbarChanging(value);
					this.SendPropertyChanging();
					this._TotalNumberOfShanbar = value;
					this.SendPropertyChanged("TotalNumberOfShanbar");
					this.OnTotalNumberOfShanbarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit")]
		public System.Nullable<bool> IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRecieved", DbType="Bit")]
		public System.Nullable<bool> IsRecieved
		{
			get
			{
				return this._IsRecieved;
			}
			set
			{
				if ((this._IsRecieved != value))
				{
					this.OnIsRecievedChanging(value);
					this.SendPropertyChanging();
					this._IsRecieved = value;
					this.SendPropertyChanged("IsRecieved");
					this.OnIsRecievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDiscarded", DbType="Bit")]
		public System.Nullable<bool> IsDiscarded
		{
			get
			{
				return this._IsDiscarded;
			}
			set
			{
				if ((this._IsDiscarded != value))
				{
					this.OnIsDiscardedChanging(value);
					this.SendPropertyChanging();
					this._IsDiscarded = value;
					this.SendPropertyChanged("IsDiscarded");
					this.OnIsDiscardedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceMaster_InvoiceDetailForLense", Storage="_InvoiceDetailForLenses", ThisKey="InvoiceId", OtherKey="InvoiceId")]
		public EntitySet<InvoiceDetailForLense> InvoiceDetailForLenses
		{
			get
			{
				return this._InvoiceDetailForLenses;
			}
			set
			{
				this._InvoiceDetailForLenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceMaster_InvoiceDetialForShanbar", Storage="_InvoiceDetialForShanbars", ThisKey="InvoiceId", OtherKey="InvoiceId")]
		public EntitySet<InvoiceDetialForShanbar> InvoiceDetialForShanbars
		{
			get
			{
				return this._InvoiceDetialForShanbars;
			}
			set
			{
				this._InvoiceDetialForShanbars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocType_InvoiceMaster", Storage="_DocType", ThisKey="DocTypeId", OtherKey="DocTypeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public DocType DocType
		{
			get
			{
				return this._DocType.Entity;
			}
			set
			{
				DocType previousValue = this._DocType.Entity;
				if (((previousValue != value) 
							|| (this._DocType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocType.Entity = null;
						previousValue.InvoiceMasters.Remove(this);
					}
					this._DocType.Entity = value;
					if ((value != null))
					{
						value.InvoiceMasters.Add(this);
						this._DocTypeId = value.DocTypeId;
					}
					else
					{
						this._DocTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_InvoiceMaster", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.InvoiceMasters.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.InvoiceMasters.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceStatu_InvoiceMaster", Storage="_InvoiceStatu", ThisKey="InvoiceStatuId", OtherKey="InvoiceStatuId", IsForeignKey=true, DeleteRule="CASCADE")]
		public InvoiceStatu InvoiceStatu
		{
			get
			{
				return this._InvoiceStatu.Entity;
			}
			set
			{
				InvoiceStatu previousValue = this._InvoiceStatu.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceStatu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceStatu.Entity = null;
						previousValue.InvoiceMasters.Remove(this);
					}
					this._InvoiceStatu.Entity = value;
					if ((value != null))
					{
						value.InvoiceMasters.Add(this);
						this._InvoiceStatuId = value.InvoiceStatuId;
					}
					else
					{
						this._InvoiceStatuId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceStatu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_InvoiceMaster", Storage="_Store", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.InvoiceMasters.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.InvoiceMasters.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treasury_InvoiceMaster", Storage="_Treasury", ThisKey="TreasuryId", OtherKey="TreasuryId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Treasury Treasury
		{
			get
			{
				return this._Treasury.Entity;
			}
			set
			{
				Treasury previousValue = this._Treasury.Entity;
				if (((previousValue != value) 
							|| (this._Treasury.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Treasury.Entity = null;
						previousValue.InvoiceMasters.Remove(this);
					}
					this._Treasury.Entity = value;
					if ((value != null))
					{
						value.InvoiceMasters.Add(this);
						this._TreasuryId = value.TreasuryId;
					}
					else
					{
						this._TreasuryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Treasury");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetailForLenses(InvoiceDetailForLense entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceMaster = this;
		}
		
		private void detach_InvoiceDetailForLenses(InvoiceDetailForLense entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceMaster = null;
		}
		
		private void attach_InvoiceDetialForShanbars(InvoiceDetialForShanbar entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceMaster = this;
		}
		
		private void detach_InvoiceDetialForShanbars(InvoiceDetialForShanbar entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceStatu")]
	public partial class InvoiceStatu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceStatuId;
		
		private string _InvoiceStatuDesc;
		
		private EntitySet<InvoiceMaster> _InvoiceMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceStatuIdChanging(int value);
    partial void OnInvoiceStatuIdChanged();
    partial void OnInvoiceStatuDescChanging(string value);
    partial void OnInvoiceStatuDescChanged();
    #endregion
		
		public InvoiceStatu()
		{
			this._InvoiceMasters = new EntitySet<InvoiceMaster>(new Action<InvoiceMaster>(this.attach_InvoiceMasters), new Action<InvoiceMaster>(this.detach_InvoiceMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceStatuId
		{
			get
			{
				return this._InvoiceStatuId;
			}
			set
			{
				if ((this._InvoiceStatuId != value))
				{
					this.OnInvoiceStatuIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceStatuId = value;
					this.SendPropertyChanged("InvoiceStatuId");
					this.OnInvoiceStatuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatuDesc", DbType="NVarChar(MAX)")]
		public string InvoiceStatuDesc
		{
			get
			{
				return this._InvoiceStatuDesc;
			}
			set
			{
				if ((this._InvoiceStatuDesc != value))
				{
					this.OnInvoiceStatuDescChanging(value);
					this.SendPropertyChanging();
					this._InvoiceStatuDesc = value;
					this.SendPropertyChanged("InvoiceStatuDesc");
					this.OnInvoiceStatuDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InvoiceStatu_InvoiceMaster", Storage="_InvoiceMasters", ThisKey="InvoiceStatuId", OtherKey="InvoiceStatuId")]
		public EntitySet<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this._InvoiceMasters;
			}
			set
			{
				this._InvoiceMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceStatu = this;
		}
		
		private void detach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceStatu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private string _ItemDesc;
		
		private string _ItemBarcode;
		
		private System.Nullable<decimal> _BuyPrice;
		
		private System.Nullable<decimal> _SellPrice;
		
		private System.Nullable<decimal> _SoldSellPrice;
		
		private System.Nullable<int> _SoldQuantity;
		
		private System.Nullable<int> _GroupId;
		
		private System.Nullable<int> _ItemTypeId;
		
		private string _SphStrenth;
		
		private string _CylStrenth;
		
		private System.Nullable<decimal> _DoubleSellPrice;
		
		private System.Nullable<decimal> _SingleSellPrice;
		
		private System.Nullable<int> _SignalTypeId;
		
		private System.Nullable<int> _BeginingBalance;
		
		private System.Nullable<bool> _ItemISActive;
		
		private EntitySet<InvoiceDetailForLense> _InvoiceDetailForLenses;
		
		private EntitySet<InvoiceDetialForShanbar> _InvoiceDetialForShanbars;
		
		private EntitySet<ItemsStore> _ItemsStores;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<ItemType> _ItemType;
		
		private EntityRef<SignalType> _SignalType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnItemDescChanging(string value);
    partial void OnItemDescChanged();
    partial void OnItemBarcodeChanging(string value);
    partial void OnItemBarcodeChanged();
    partial void OnBuyPriceChanging(System.Nullable<decimal> value);
    partial void OnBuyPriceChanged();
    partial void OnSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSellPriceChanged();
    partial void OnSoldSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSoldSellPriceChanged();
    partial void OnSoldQuantityChanging(System.Nullable<int> value);
    partial void OnSoldQuantityChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnItemTypeIdChanging(System.Nullable<int> value);
    partial void OnItemTypeIdChanged();
    partial void OnSphStrenthChanging(string value);
    partial void OnSphStrenthChanged();
    partial void OnCylStrenthChanging(string value);
    partial void OnCylStrenthChanged();
    partial void OnDoubleSellPriceChanging(System.Nullable<decimal> value);
    partial void OnDoubleSellPriceChanged();
    partial void OnSingleSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSingleSellPriceChanged();
    partial void OnSignalTypeIdChanging(System.Nullable<int> value);
    partial void OnSignalTypeIdChanged();
    partial void OnBeginingBalanceChanging(System.Nullable<int> value);
    partial void OnBeginingBalanceChanged();
    partial void OnItemISActiveChanging(System.Nullable<bool> value);
    partial void OnItemISActiveChanged();
    #endregion
		
		public Item()
		{
			this._InvoiceDetailForLenses = new EntitySet<InvoiceDetailForLense>(new Action<InvoiceDetailForLense>(this.attach_InvoiceDetailForLenses), new Action<InvoiceDetailForLense>(this.detach_InvoiceDetailForLenses));
			this._InvoiceDetialForShanbars = new EntitySet<InvoiceDetialForShanbar>(new Action<InvoiceDetialForShanbar>(this.attach_InvoiceDetialForShanbars), new Action<InvoiceDetialForShanbar>(this.detach_InvoiceDetialForShanbars));
			this._ItemsStores = new EntitySet<ItemsStore>(new Action<ItemsStore>(this.attach_ItemsStores), new Action<ItemsStore>(this.detach_ItemsStores));
			this._Group = default(EntityRef<Group>);
			this._ItemType = default(EntityRef<ItemType>);
			this._SignalType = default(EntityRef<SignalType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDesc", DbType="NVarChar(MAX)")]
		public string ItemDesc
		{
			get
			{
				return this._ItemDesc;
			}
			set
			{
				if ((this._ItemDesc != value))
				{
					this.OnItemDescChanging(value);
					this.SendPropertyChanging();
					this._ItemDesc = value;
					this.SendPropertyChanged("ItemDesc");
					this.OnItemDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemBarcode", DbType="NVarChar(MAX)")]
		public string ItemBarcode
		{
			get
			{
				return this._ItemBarcode;
			}
			set
			{
				if ((this._ItemBarcode != value))
				{
					this.OnItemBarcodeChanging(value);
					this.SendPropertyChanging();
					this._ItemBarcode = value;
					this.SendPropertyChanged("ItemBarcode");
					this.OnItemBarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SoldSellPrice
		{
			get
			{
				return this._SoldSellPrice;
			}
			set
			{
				if ((this._SoldSellPrice != value))
				{
					this.OnSoldSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SoldSellPrice = value;
					this.SendPropertyChanged("SoldSellPrice");
					this.OnSoldSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldQuantity", DbType="Int")]
		public System.Nullable<int> SoldQuantity
		{
			get
			{
				return this._SoldQuantity;
			}
			set
			{
				if ((this._SoldQuantity != value))
				{
					this.OnSoldQuantityChanging(value);
					this.SendPropertyChanging();
					this._SoldQuantity = value;
					this.SendPropertyChanged("SoldQuantity");
					this.OnSoldQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeId", DbType="Int")]
		public System.Nullable<int> ItemTypeId
		{
			get
			{
				return this._ItemTypeId;
			}
			set
			{
				if ((this._ItemTypeId != value))
				{
					if (this._ItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeId = value;
					this.SendPropertyChanged("ItemTypeId");
					this.OnItemTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SphStrenth", DbType="NVarChar(MAX)")]
		public string SphStrenth
		{
			get
			{
				return this._SphStrenth;
			}
			set
			{
				if ((this._SphStrenth != value))
				{
					this.OnSphStrenthChanging(value);
					this.SendPropertyChanging();
					this._SphStrenth = value;
					this.SendPropertyChanged("SphStrenth");
					this.OnSphStrenthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CylStrenth", DbType="NVarChar(MAX)")]
		public string CylStrenth
		{
			get
			{
				return this._CylStrenth;
			}
			set
			{
				if ((this._CylStrenth != value))
				{
					this.OnCylStrenthChanging(value);
					this.SendPropertyChanging();
					this._CylStrenth = value;
					this.SendPropertyChanged("CylStrenth");
					this.OnCylStrenthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DoubleSellPrice
		{
			get
			{
				return this._DoubleSellPrice;
			}
			set
			{
				if ((this._DoubleSellPrice != value))
				{
					this.OnDoubleSellPriceChanging(value);
					this.SendPropertyChanging();
					this._DoubleSellPrice = value;
					this.SendPropertyChanged("DoubleSellPrice");
					this.OnDoubleSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SingleSellPrice
		{
			get
			{
				return this._SingleSellPrice;
			}
			set
			{
				if ((this._SingleSellPrice != value))
				{
					this.OnSingleSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SingleSellPrice = value;
					this.SendPropertyChanged("SingleSellPrice");
					this.OnSingleSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalTypeId", DbType="Int")]
		public System.Nullable<int> SignalTypeId
		{
			get
			{
				return this._SignalTypeId;
			}
			set
			{
				if ((this._SignalTypeId != value))
				{
					if (this._SignalType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignalTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SignalTypeId = value;
					this.SendPropertyChanged("SignalTypeId");
					this.OnSignalTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginingBalance", DbType="Int")]
		public System.Nullable<int> BeginingBalance
		{
			get
			{
				return this._BeginingBalance;
			}
			set
			{
				if ((this._BeginingBalance != value))
				{
					this.OnBeginingBalanceChanging(value);
					this.SendPropertyChanging();
					this._BeginingBalance = value;
					this.SendPropertyChanged("BeginingBalance");
					this.OnBeginingBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemISActive", DbType="Bit")]
		public System.Nullable<bool> ItemISActive
		{
			get
			{
				return this._ItemISActive;
			}
			set
			{
				if ((this._ItemISActive != value))
				{
					this.OnItemISActiveChanging(value);
					this.SendPropertyChanging();
					this._ItemISActive = value;
					this.SendPropertyChanged("ItemISActive");
					this.OnItemISActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InvoiceDetailForLense", Storage="_InvoiceDetailForLenses", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<InvoiceDetailForLense> InvoiceDetailForLenses
		{
			get
			{
				return this._InvoiceDetailForLenses;
			}
			set
			{
				this._InvoiceDetailForLenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_InvoiceDetialForShanbar", Storage="_InvoiceDetialForShanbars", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<InvoiceDetialForShanbar> InvoiceDetialForShanbars
		{
			get
			{
				return this._InvoiceDetialForShanbars;
			}
			set
			{
				this._InvoiceDetialForShanbars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemsStore", Storage="_ItemsStores", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<ItemsStore> ItemsStores
		{
			get
			{
				return this._ItemsStores;
			}
			set
			{
				this._ItemsStores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Item", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_ItemType", ThisKey="ItemTypeId", OtherKey="ItemTypeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemType ItemType
		{
			get
			{
				return this._ItemType.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType.Entity;
				if (((previousValue != value) 
							|| (this._ItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemTypeId = value.ItemTypeId;
					}
					else
					{
						this._ItemTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignalType_Item", Storage="_SignalType", ThisKey="SignalTypeId", OtherKey="SignalTypeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public SignalType SignalType
		{
			get
			{
				return this._SignalType.Entity;
			}
			set
			{
				SignalType previousValue = this._SignalType.Entity;
				if (((previousValue != value) 
							|| (this._SignalType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignalType.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._SignalType.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._SignalTypeId = value.SignalTypeId;
					}
					else
					{
						this._SignalTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SignalType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetailForLenses(InvoiceDetailForLense entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_InvoiceDetailForLenses(InvoiceDetailForLense entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_InvoiceDetialForShanbars(InvoiceDetialForShanbar entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_InvoiceDetialForShanbars(InvoiceDetialForShanbar entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ItemsStores(ItemsStore entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemsStores(ItemsStore entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemsStores")]
	public partial class ItemsStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemsStoreId;
		
		private System.Nullable<int> _StoreId;
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<decimal> _ItemQuantityOnHand;
		
		private System.Nullable<decimal> _ItemSellPrice;
		
		private System.Nullable<decimal> _ItemBuyPrice;
		
		private string _InvoiceNotes;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Store> _Store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemsStoreIdChanging(int value);
    partial void OnItemsStoreIdChanged();
    partial void OnStoreIdChanging(System.Nullable<int> value);
    partial void OnStoreIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnItemQuantityOnHandChanging(System.Nullable<decimal> value);
    partial void OnItemQuantityOnHandChanged();
    partial void OnItemSellPriceChanging(System.Nullable<decimal> value);
    partial void OnItemSellPriceChanged();
    partial void OnItemBuyPriceChanging(System.Nullable<decimal> value);
    partial void OnItemBuyPriceChanged();
    partial void OnInvoiceNotesChanging(string value);
    partial void OnInvoiceNotesChanged();
    #endregion
		
		public ItemsStore()
		{
			this._Item = default(EntityRef<Item>);
			this._Store = default(EntityRef<Store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemsStoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemsStoreId
		{
			get
			{
				return this._ItemsStoreId;
			}
			set
			{
				if ((this._ItemsStoreId != value))
				{
					this.OnItemsStoreIdChanging(value);
					this.SendPropertyChanging();
					this._ItemsStoreId = value;
					this.SendPropertyChanged("ItemsStoreId");
					this.OnItemsStoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._Store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemQuantityOnHand", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemQuantityOnHand
		{
			get
			{
				return this._ItemQuantityOnHand;
			}
			set
			{
				if ((this._ItemQuantityOnHand != value))
				{
					this.OnItemQuantityOnHandChanging(value);
					this.SendPropertyChanging();
					this._ItemQuantityOnHand = value;
					this.SendPropertyChanged("ItemQuantityOnHand");
					this.OnItemQuantityOnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSellPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemSellPrice
		{
			get
			{
				return this._ItemSellPrice;
			}
			set
			{
				if ((this._ItemSellPrice != value))
				{
					this.OnItemSellPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemSellPrice = value;
					this.SendPropertyChanged("ItemSellPrice");
					this.OnItemSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemBuyPrice", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ItemBuyPrice
		{
			get
			{
				return this._ItemBuyPrice;
			}
			set
			{
				if ((this._ItemBuyPrice != value))
				{
					this.OnItemBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemBuyPrice = value;
					this.SendPropertyChanged("ItemBuyPrice");
					this.OnItemBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNotes", DbType="NVarChar(MAX)")]
		public string InvoiceNotes
		{
			get
			{
				return this._InvoiceNotes;
			}
			set
			{
				if ((this._InvoiceNotes != value))
				{
					this.OnInvoiceNotesChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNotes = value;
					this.SendPropertyChanged("InvoiceNotes");
					this.OnInvoiceNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemsStore", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemsStores.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemsStores.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_ItemsStore", Storage="_Store", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Store Store
		{
			get
			{
				return this._Store.Entity;
			}
			set
			{
				Store previousValue = this._Store.Entity;
				if (((previousValue != value) 
							|| (this._Store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Store.Entity = null;
						previousValue.ItemsStores.Remove(this);
					}
					this._Store.Entity = value;
					if ((value != null))
					{
						value.ItemsStores.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemType")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemTypeId;
		
		private string _ItemTypeDesc;
		
		private System.Nullable<bool> _ItemTypeIsActive;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemTypeIdChanging(int value);
    partial void OnItemTypeIdChanged();
    partial void OnItemTypeDescChanging(string value);
    partial void OnItemTypeDescChanged();
    partial void OnItemTypeIsActiveChanging(System.Nullable<bool> value);
    partial void OnItemTypeIsActiveChanged();
    #endregion
		
		public ItemType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemTypeId
		{
			get
			{
				return this._ItemTypeId;
			}
			set
			{
				if ((this._ItemTypeId != value))
				{
					this.OnItemTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeId = value;
					this.SendPropertyChanged("ItemTypeId");
					this.OnItemTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeDesc", DbType="NVarChar(MAX)")]
		public string ItemTypeDesc
		{
			get
			{
				return this._ItemTypeDesc;
			}
			set
			{
				if ((this._ItemTypeDesc != value))
				{
					this.OnItemTypeDescChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeDesc = value;
					this.SendPropertyChanged("ItemTypeDesc");
					this.OnItemTypeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTypeIsActive", DbType="Bit")]
		public System.Nullable<bool> ItemTypeIsActive
		{
			get
			{
				return this._ItemTypeIsActive;
			}
			set
			{
				if ((this._ItemTypeIsActive != value))
				{
					this.OnItemTypeIsActiveChanging(value);
					this.SendPropertyChanging();
					this._ItemTypeIsActive = value;
					this.SendPropertyChanged("ItemTypeIsActive");
					this.OnItemTypeIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_Items", ThisKey="ItemTypeId", OtherKey="ItemTypeId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignalType")]
	public partial class SignalType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SignalTypeId;
		
		private string _SignalTypeDesc;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSignalTypeIdChanging(int value);
    partial void OnSignalTypeIdChanged();
    partial void OnSignalTypeDescChanging(string value);
    partial void OnSignalTypeDescChanged();
    #endregion
		
		public SignalType()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SignalTypeId
		{
			get
			{
				return this._SignalTypeId;
			}
			set
			{
				if ((this._SignalTypeId != value))
				{
					this.OnSignalTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SignalTypeId = value;
					this.SendPropertyChanged("SignalTypeId");
					this.OnSignalTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalTypeDesc", DbType="NVarChar(MAX)")]
		public string SignalTypeDesc
		{
			get
			{
				return this._SignalTypeDesc;
			}
			set
			{
				if ((this._SignalTypeDesc != value))
				{
					this.OnSignalTypeDescChanging(value);
					this.SendPropertyChanging();
					this._SignalTypeDesc = value;
					this.SendPropertyChanged("SignalTypeDesc");
					this.OnSignalTypeDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignalType_Item", Storage="_Items", ThisKey="SignalTypeId", OtherKey="SignalTypeId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.SignalType = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.SignalType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stores")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreId;
		
		private string _StoreName;
		
		private string _StoreAddress;
		
		private string _StoreNotes;
		
		private System.Nullable<bool> _StoreIsActive;
		
		private EntitySet<InvoiceMaster> _InvoiceMasters;
		
		private EntitySet<ItemsStore> _ItemsStores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnStoreNameChanging(string value);
    partial void OnStoreNameChanged();
    partial void OnStoreAddressChanging(string value);
    partial void OnStoreAddressChanged();
    partial void OnStoreNotesChanging(string value);
    partial void OnStoreNotesChanged();
    partial void OnStoreIsActiveChanging(System.Nullable<bool> value);
    partial void OnStoreIsActiveChanged();
    #endregion
		
		public Store()
		{
			this._InvoiceMasters = new EntitySet<InvoiceMaster>(new Action<InvoiceMaster>(this.attach_InvoiceMasters), new Action<InvoiceMaster>(this.detach_InvoiceMasters));
			this._ItemsStores = new EntitySet<ItemsStore>(new Action<ItemsStore>(this.attach_ItemsStores), new Action<ItemsStore>(this.detach_ItemsStores));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreName", DbType="NVarChar(50)")]
		public string StoreName
		{
			get
			{
				return this._StoreName;
			}
			set
			{
				if ((this._StoreName != value))
				{
					this.OnStoreNameChanging(value);
					this.SendPropertyChanging();
					this._StoreName = value;
					this.SendPropertyChanged("StoreName");
					this.OnStoreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreAddress", DbType="NVarChar(50)")]
		public string StoreAddress
		{
			get
			{
				return this._StoreAddress;
			}
			set
			{
				if ((this._StoreAddress != value))
				{
					this.OnStoreAddressChanging(value);
					this.SendPropertyChanging();
					this._StoreAddress = value;
					this.SendPropertyChanged("StoreAddress");
					this.OnStoreAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreNotes", DbType="NVarChar(MAX)")]
		public string StoreNotes
		{
			get
			{
				return this._StoreNotes;
			}
			set
			{
				if ((this._StoreNotes != value))
				{
					this.OnStoreNotesChanging(value);
					this.SendPropertyChanging();
					this._StoreNotes = value;
					this.SendPropertyChanged("StoreNotes");
					this.OnStoreNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreIsActive", DbType="Bit")]
		public System.Nullable<bool> StoreIsActive
		{
			get
			{
				return this._StoreIsActive;
			}
			set
			{
				if ((this._StoreIsActive != value))
				{
					this.OnStoreIsActiveChanging(value);
					this.SendPropertyChanging();
					this._StoreIsActive = value;
					this.SendPropertyChanged("StoreIsActive");
					this.OnStoreIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_InvoiceMaster", Storage="_InvoiceMasters", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this._InvoiceMasters;
			}
			set
			{
				this._InvoiceMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_ItemsStore", Storage="_ItemsStores", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<ItemsStore> ItemsStores
		{
			get
			{
				return this._ItemsStores;
			}
			set
			{
				this._ItemsStores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
		
		private void attach_ItemsStores(ItemsStore entity)
		{
			this.SendPropertyChanging();
			entity.Store = this;
		}
		
		private void detach_ItemsStores(ItemsStore entity)
		{
			this.SendPropertyChanging();
			entity.Store = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Treasury")]
	public partial class Treasury : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TreasuryId;
		
		private System.Nullable<System.DateTime> _OpenDate;
		
		private System.Nullable<decimal> _OpenValue;
		
		private System.Nullable<decimal> _CurrentValue;
		
		private System.Nullable<decimal> _CloseValue;
		
		private System.Nullable<int> _EmployeeIdForClose;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<bool> _IsClosed;
		
		private EntitySet<CustomerPayment> _CustomerPayments;
		
		private EntitySet<InvoiceMaster> _InvoiceMasters;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreasuryIdChanging(int value);
    partial void OnTreasuryIdChanged();
    partial void OnOpenDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpenDateChanged();
    partial void OnOpenValueChanging(System.Nullable<decimal> value);
    partial void OnOpenValueChanged();
    partial void OnCurrentValueChanging(System.Nullable<decimal> value);
    partial void OnCurrentValueChanged();
    partial void OnCloseValueChanging(System.Nullable<decimal> value);
    partial void OnCloseValueChanged();
    partial void OnEmployeeIdForCloseChanging(System.Nullable<int> value);
    partial void OnEmployeeIdForCloseChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnIsClosedChanging(System.Nullable<bool> value);
    partial void OnIsClosedChanged();
    #endregion
		
		public Treasury()
		{
			this._CustomerPayments = new EntitySet<CustomerPayment>(new Action<CustomerPayment>(this.attach_CustomerPayments), new Action<CustomerPayment>(this.detach_CustomerPayments));
			this._InvoiceMasters = new EntitySet<InvoiceMaster>(new Action<InvoiceMaster>(this.attach_InvoiceMasters), new Action<InvoiceMaster>(this.detach_InvoiceMasters));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreasuryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TreasuryId
		{
			get
			{
				return this._TreasuryId;
			}
			set
			{
				if ((this._TreasuryId != value))
				{
					this.OnTreasuryIdChanging(value);
					this.SendPropertyChanging();
					this._TreasuryId = value;
					this.SendPropertyChanged("TreasuryId");
					this.OnTreasuryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpenDate
		{
			get
			{
				return this._OpenDate;
			}
			set
			{
				if ((this._OpenDate != value))
				{
					this.OnOpenDateChanging(value);
					this.SendPropertyChanging();
					this._OpenDate = value;
					this.SendPropertyChanged("OpenDate");
					this.OnOpenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenValue", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> OpenValue
		{
			get
			{
				return this._OpenValue;
			}
			set
			{
				if ((this._OpenValue != value))
				{
					this.OnOpenValueChanging(value);
					this.SendPropertyChanging();
					this._OpenValue = value;
					this.SendPropertyChanged("OpenValue");
					this.OnOpenValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentValue", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> CurrentValue
		{
			get
			{
				return this._CurrentValue;
			}
			set
			{
				if ((this._CurrentValue != value))
				{
					this.OnCurrentValueChanging(value);
					this.SendPropertyChanging();
					this._CurrentValue = value;
					this.SendPropertyChanged("CurrentValue");
					this.OnCurrentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseValue", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> CloseValue
		{
			get
			{
				return this._CloseValue;
			}
			set
			{
				if ((this._CloseValue != value))
				{
					this.OnCloseValueChanging(value);
					this.SendPropertyChanging();
					this._CloseValue = value;
					this.SendPropertyChanged("CloseValue");
					this.OnCloseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeIdForClose", DbType="Int")]
		public System.Nullable<int> EmployeeIdForClose
		{
			get
			{
				return this._EmployeeIdForClose;
			}
			set
			{
				if ((this._EmployeeIdForClose != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdForCloseChanging(value);
					this.SendPropertyChanging();
					this._EmployeeIdForClose = value;
					this.SendPropertyChanged("EmployeeIdForClose");
					this.OnEmployeeIdForCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit")]
		public System.Nullable<bool> IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treasury_CustomerPayment", Storage="_CustomerPayments", ThisKey="TreasuryId", OtherKey="TreasuryId")]
		public EntitySet<CustomerPayment> CustomerPayments
		{
			get
			{
				return this._CustomerPayments;
			}
			set
			{
				this._CustomerPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treasury_InvoiceMaster", Storage="_InvoiceMasters", ThisKey="TreasuryId", OtherKey="TreasuryId")]
		public EntitySet<InvoiceMaster> InvoiceMasters
		{
			get
			{
				return this._InvoiceMasters;
			}
			set
			{
				this._InvoiceMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Treasury", Storage="_Employee", ThisKey="EmployeeIdForClose", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Treasuries.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Treasuries.Add(this);
						this._EmployeeIdForClose = value.EmployeeId;
					}
					else
					{
						this._EmployeeIdForClose = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerPayments(CustomerPayment entity)
		{
			this.SendPropertyChanging();
			entity.Treasury = this;
		}
		
		private void detach_CustomerPayments(CustomerPayment entity)
		{
			this.SendPropertyChanging();
			entity.Treasury = null;
		}
		
		private void attach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Treasury = this;
		}
		
		private void detach_InvoiceMasters(InvoiceMaster entity)
		{
			this.SendPropertyChanging();
			entity.Treasury = null;
		}
	}
}
#pragma warning restore 1591
